#-*- mode: org; -*-


#+BEGIN_EXAMPLE
                                +--<Parser>----------------+
                                +----------+               |
  program--> [Lexer] --tokens-->+ α-Parser |--->AtomSet    +--AST-->[CodeGenerator]-->Assembly
                                +----------+               |
                                +--------------------------+
#+END_EXAMPLE

* Lexer
Производит лексический анализ программы
- Вход :: текст программы на Room
- Выход :: поток токенов
* Alpha-parser (α-Parser)
- Вход :: поток токенов
- Выход :: структура множества-атомы
* Parser
- Вход :: дерево атомов
- Выход :: AST
- Процесс разбора ::
* CodeGenerator
* Временные замечания
Трансляция AtomSet в AST вовлекает в себя процес спуска по префиксному дереву, прификсами служат возможноые выражения языка. Т.к. в языке существует возможность задания алиасов, то при спуске дерева необходимо производить разворачивание алиасов. Наличие в Room перспектив, приводит к понятию слоистой структуры пространств имен символов. Поэтому, при разворачивании необхоидмо смотреть как глобальное для данного контекста пространство имен (заданное всеми вышестоящими перспективами исключая текущую) так и локальное (задданое текущей перспективой). Сами перспективы нельзя получать путем разворачивания локальных алиасов, поэтому неоходимо в handler перспективы заново производить разворачивание но теперь смотреть откуда прошел символ из локлаьного или глобального пространств имен. Если из локального, то ошибка допущенная в программе, например:
#+BEGIN_EXAMPLE
  {1 2}
      a = {3 4}
      a a >> a
#+END_EXAMPLE
во время трансляции будет 'a' разворачивается в '{3 4}', но 'a' это локальный алиас, поэтому {3 4} не может быть перспективой:
#+BEGIN_EXAMPLE
  {1 2}
     a = {3 4}
  {3 4}            "This is not perspective"
     ...
#+END_EXAMPLE
поэтому если слудующее выражение является в Room перспетивос с эмисией:
#+BEGIN_EXAMPLE
  {3 4} {3 4} >> {3 4}
#+END_EXAMPLE
то вышестоящая программа должна выдать ошибку времени трансляции.



