#ifndef ROOM_LEXER_PRIVATE_H
#define ROOM_LEXER_PRIVATE_H

#include <functional>
#include <vector>
#include <cstdint>
#include "lexer.re2c.conditions.h"
#include "room/core/token.h"
#include "room/lexer.h"

namespace token = room::core::token;

namespace room {
namespace details {

struct Re2cLexerState {
    typedef uint8_t CharType;
    YYCONDTYPE cond;

    // when refilling, piece between
    // the lexemeStart and lexemeEnd
    // may be stored in temporary
    // storage as needed, and in final
    // concatenated with tail of lexeme
    CharType *lexemeStart;

    // when refilling, the following
    // pointers should be adjusted
    CharType *lexemeEnd;
    CharType *inputBufferEnd;
    CharType *ctxMarker;
    CharType *marker;
};

token::Class nextToken(Re2cLexerState &state, std::function<void(std::size_t)> refill) {
#   define GOTO_COND(condition_name) goto cond_##condition_name
#   define YYGETCONDITION() state.cond
#   define YYSETCONDITION(x) { state.cond = (x); }

    // in reffiling function we use algorithm which finds
    // the closest to the state.lexemeStart pointer
    state.ctxMarker = state.inputBufferEnd;
    state.marker = state.inputBufferEnd;

/*!re2c
    re2c:indent:string      =   "    ";
    re2c:condprefix         =   cond_;
    re2c:condenumprefix     =   ;
    re2c:yyfill:enable      =   1;
    re2c:define:YYCTYPE     =   Re2cLexerState::CharType;
    re2c:define:YYCURSOR    =   state.lexemeEnd;
    re2c:define:YYLIMIT     =   state.inputBufferEnd;
    re2c:define:YYCTXMARKER =   state.ctxMarker;
    re2c:define:YYMARKER    =   state.marker;
    re2c:define:YYFILL      =   refill;

    ///////////////////////////////////////////////////////////////////////////
    // Lexemes:
    ANY                     =   [^];
    EOI                     =   [\x00];     // end of input
    NOT_EOI                 =   [^\x00];
    COMMENT_DELIMITER       =   ["];
    REGULAR_SPACE_BEGIN     =   '}';
    REGULAR_SPACE_END       =   '}';
    SINGULAR_SPACE_BEGIN    =   '(';
    SINGULAR_SPACE_END      =   ')';
    MUTLI_ESCAPED_ATOM      =   "|" [^|\x00]+ "|";
    ATOM                    =   ([^'| \t\x00] | "\\" NOT_EOI)+;

    ///////////////////////////////////////////////////////////////////////////
    // Notes:
    //  --state.lexemeEnd   -   means "put back the consumed symbol"
    //
    ///////////////////////////////////////////////////////////////////////////
    <COMMENT, SINGULAR_SPACE> EOI           { --state.lexemeEnd; return token::Class::Error; }

    ///////////////////////////////////////////////////////////////////////////
    <COMMENT> COMMENT_DELIMITER             :=> REGULAR_SPACE
    <COMMENT> ANY                           :=> COMMENT

    ///////////////////////////////////////////////////////////////////////////
    <REGULAR_SPACE> EOI                     { --state.lexemeEnd; return token::Class::End; }
    <REGULAR_SPACE> COMMENT_DELIMITER       :=> COMMENT
    <REGULAR_SPACE> SINGULAR_SPACE_BEGIN    => SINGULAR_SPACE { return token::Class::SpaceBegin; }
    <REGULAR_SPACE> REGULAR_SPACE_BEGIN     { return token::Class::SpaceBegin; }
    <REGULAR_SPACE> REGULAR_SPACE_END       { return token::Class::SpaceEnd; }
    <REGULAR_SPACE> ['] / [^ '\t\n]         { return token::Class::Quotation; }
    <REGULAR_SPACE> [ \t\n]                 { ++state.lexemeStart; GOTO_COND(REGULAR_SPACE); }
    <REGULAR_SPACE> MUTLI_ESCAPED_ATOM      { return token::Class::Atom; }
    <REGULAR_SPACE> ATOM                    { return token::Class::Atom; }

    ///////////////////////////////////////////////////////////////////////////
    <SINGULAR_SPACE> ['] / [^']             { return token::Class::Quotation; }
    <SINGULAR_SPACE> "\\" ANY               { ++state.lexemeStart; return token::Class::Atom; }
    <SINGULAR_SPACE> SINGULAR_SPACE_END     => REGULAR_SPACE { return token::Class::SpaceEnd; }
    <SINGULAR_SPACE> [^']                   { return token::Class::Atom; }

    ///////////////////////////////////////////////////////////////////////////
    <*> ANY                                 { return token::Class::Error; }
*/
}

} // namespace details


class Lexer::Private {
public:
    Private(std::streambuf *sb, std::size_t internalBufferSize)
        : source(sb), buffer(internalBufferSize)
    {
        re2cState.cond = YYCONDTYPE::REGULAR_SPACE;
        re2cState.inputBufferEnd = &buffer.back();
        re2cState.lexemeStart = re2cState.inputBufferEnd;
        re2cState.lexemeEnd = re2cState.inputBufferEnd;
        re2cState.ctxMarker = re2cState.inputBufferEnd;
        re2cState.marker = re2cState.inputBufferEnd;
    }

    void refill(std::size_t n) {
        auto *base = &buffer.front();

        auto skippedHeadSize = std::distance(re2cState.lexemeStart, base);
        auto passedLexemePartSize = std::distance(re2cState.lexemeStart, std::min(re2cState.lexemeEnd,
                                                                                  std::min(re2cState.ctxMarker, re2cState.marker)));

        if (n <= skippedHeadSize) { // we have enough space at beginning of the buffer, let's use it by shifting to the left the rest of the buffer
            std::copy(base + skippedHeadSize, re2cState.inputBufferEnd, base);
        } else if (n <= (skippedHeadSize + passedLexemePartSize)) { // stash the passed part of the lexeme into the temporary space

        } else {
            throw "ooo";
        }
    }


    std::streambuf *source;
    std::vector<details::Re2cLexerState::CharType> buffer;
    details::Re2cLexerState re2cState;
};

} // namespace room

#endif // ROOM_LEXER_PRIVATE_H

